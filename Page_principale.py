#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue May 17 22:03:08 2022
@author: Osjo
"""

#Librairies utilis√©s
import pandas as pd
import numpy as np
import streamlit as st
import seaborn as sns
import matplotlib.pyplot as plt
from PIL import Image
import plotly.graph_objects as go
import pickle
import shap
from streamlit_shap import st_shap
import imblearn



st.sidebar.markdown("# üéà PAGE D'ACCUEIL ")
st.sidebar.markdown("<p style='text-align:center;'> <img src='https://cdn.dribbble.com/users/513906/screenshots/5384407/dribbb.gif' width='250' height='200'> </p>", unsafe_allow_html=True)



#Micha√´l vous a fourni des sp√©cifications pour le dashboard interactif. Celui-ci devra contenir au minimum les fonctionnalit√©s suivantes :

#Permettre de visualiser le score et l‚Äôinterpr√©tation de ce score pour chaque client de fa√ßon intelligible pour une personne non experte en data science.
#Permettre de visualiser des informations descriptives relatives √† un client (via un syst√®me de filtre).
#Permettre de comparer les informations descriptives relatives √† un client √† l‚Äôensemble des clients ou √† un groupe de clients similaires.

#Test
df=pd.read_csv("Data/Test.csv")
#st.dataframe(df.head())


#Pr√©sentation de l'application
st.markdown("<h1 style='text-align: center; color: lightblue;'> Score cr√©dit</h1>", unsafe_allow_html=True)

st.markdown("<p style='text-align: justify;'>L'objectif est de d√©terminer si un client peut re√ßevoir un cr√©dit √† la consommation via un score. Cet interface int√©ractif permmet de visualiser les informations descriptives et le score bancaire d'un client. Il est aussi possibles de comparer ces informations avec l'ensemble des clients ou √† un groupe similaire.</p>", unsafe_allow_html=True)

#st.markdown("<p style='text-align: justify;'>Cet interface int√©ractif permmet de visualiser les informations descriptives et le score bancaire d'un client. Il est aussi possibles de comparer ces informations avec l'ensemble des clients ou √† un groupe similaire.</p>", unsafe_allow_html=True)

image = Image.open('Images/Scoring.jpeg')
st.image(image, caption=" L'outil 'scoring cr√©dit' calcule la probabilit√© qu‚Äôun client rembourse son cr√©dit, puis classifie la demande en cr√©dit accord√© ou refus√©. Elle souhaite donc d√©velopper un algorithme de classification en s‚Äôappuyant sur des sources de donn√©es vari√©es (donn√©es comportementales, donn√©es provenant d'autres institutions financi√®res, etc.).")


# Information g√©n√©rale sur un client 

#SHAP
#filename = 'Data/model.sav'

model= pd.read_pickle(r'Data/model.sav')
#model = pickle.load(open(filename, 'rb'))

explainer = shap.TreeExplainer(model[1])
choosen_instance = df
shap_values = explainer.shap_values(choosen_instance)
st_shap(shap.summary_plot(shap_values,df, plot_size=[14,5]))



# Autres


st.markdown("<h3 style='text-align: left; color: lightblue;'>R√©f√©rences</h3>", unsafe_allow_html=True)

st.markdown("[[1] 10 Techniques to deal with Imbalanced Classes in Machine Learning](https://www.analyticsvidhya.com/blog/2020/07/10-techniques-to-deal-with-class-imbalance-in-machine-learning/)",unsafe_allow_html=True)

st.markdown("[[2] Interpretable Machine Learning](https://christophm.github.io/interpretable-ml-book/)",unsafe_allow_html=True)

st.markdown("[[-] Osjo (2022), lien github  ](https://github.com/0SJ0)",unsafe_allow_html=True)

